#include <GxEPD2_3C.h>  // Inclui a biblioteca para displays com três cores (branco, preto e vermelho)
#include <Fonts/FreeMonoBold18pt7b.h>  // Fonte para o preço
#include <Fonts/FreeMonoBold12pt7b.h>  // Fonte para o nome do produto
#include <Fonts/FreeMonoBold9pt7b.h>  // Fonte para cod barra

// Configuração para o display de 2.9'' com resolução 296x128
GxEPD2_3C<GxEPD2_290_C90c, GxEPD2_290_C90c::HEIGHT> display(GxEPD2_290_C90c(/*CS=*/ D8, /*DC=*/ D2, /*RST=*/ D1, /*BUSY=*/ D0));

// Array de bytes para a imagem gerada (90x70px)
const unsigned char epd_bitmap_biasi_image [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xc0, 
	0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xc0, 
	0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7f, 0xff, 0xc0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 
	0xff, 0xfe, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0xff, 0xf8, 0x00, 0x00, 
	0x03, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xc0, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 
	0x00, 0x03, 0xff, 0xc0, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x00, 0x00, 0x03, 0xff, 0xc0, 
	0xff, 0xe0, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0x01, 0xff, 0xc0, 0xff, 0xc0, 0x00, 0x00, 
	0xff, 0xff, 0xfb, 0xc0, 0x00, 0x00, 0xff, 0xc0, 0xff, 0x80, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xe0, 
	0x00, 0x00, 0x7f, 0xc0, 0xff, 0x80, 0x00, 0x01, 0xff, 0xf8, 0x00, 0xe0, 0x00, 0x00, 0x7f, 0xc0, 
	0xff, 0x00, 0x00, 0x01, 0xc0, 0x07, 0xe6, 0xf0, 0x00, 0x00, 0x3f, 0xc0, 0xfe, 0x00, 0x00, 0x03, 
	0xcf, 0xff, 0xe6, 0xf0, 0x00, 0x00, 0x1f, 0xc0, 0xfe, 0x00, 0x00, 0x03, 0xcf, 0xff, 0xec, 0xf8, 
	0x00, 0x00, 0x1f, 0xc0, 0xfc, 0x00, 0x00, 0x03, 0xef, 0xff, 0xed, 0xf8, 0x00, 0x00, 0x0f, 0xc0, 
	0xfc, 0x00, 0x00, 0x03, 0xe7, 0xff, 0xcd, 0xf8, 0x00, 0x00, 0x0f, 0xc0, 0xfc, 0x00, 0x00, 0x03, 
	0xe7, 0xff, 0xd9, 0xf8, 0x00, 0x00, 0x0f, 0xc0, 0xf8, 0x00, 0x00, 0x03, 0xf7, 0xff, 0x9b, 0xf8, 
	0x00, 0x00, 0x07, 0xc0, 0xf8, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x3b, 0xf8, 0x00, 0x00, 0x07, 0xc0, 
	0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf3, 0xf0, 0x00, 0x00, 0x07, 0xc0, 0xf8, 0x00, 0x00, 0x01, 
	0xff, 0xff, 0xf7, 0xf0, 0x00, 0x00, 0x03, 0xc0, 0xf0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe7, 0xe0, 
	0x00, 0x00, 0x03, 0xc0, 0xf0, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x03, 0xc0, 
	0xf0, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x3f, 0xc0, 0x00, 0x00, 0x03, 0xc0, 0xf0, 0x00, 0x00, 0x00, 
	0x7e, 0x7f, 0x3f, 0x80, 0x00, 0x00, 0x03, 0xc0, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x00, 
	0x00, 0x00, 0x03, 0xc0, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xc0, 
	0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xc0, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x03, 0xc0, 0xf0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x01, 
	0x00, 0x00, 0x03, 0xc0, 0xf0, 0x00, 0x19, 0x5c, 0xcd, 0xd3, 0x16, 0xe7, 0x36, 0x00, 0x03, 0xc0, 
	0xf0, 0x00, 0x1d, 0x5f, 0xed, 0xff, 0xfe, 0xff, 0x77, 0x00, 0x03, 0xc0, 0xf8, 0x00, 0x1d, 0xdf, 
	0xe9, 0x5f, 0xee, 0xff, 0x77, 0x00, 0x07, 0xc0, 0xf8, 0x00, 0x18, 0x9c, 0x49, 0x43, 0x06, 0xc4, 
	0x26, 0x00, 0x07, 0xc0, 0xf8, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 
	0xfc, 0x00, 0x3f, 0xf0, 0x70, 0x0c, 0x00, 0xff, 0xe7, 0x00, 0x0f, 0xc0, 0xfc, 0x00, 0x3f, 0xfc, 
	0x70, 0x1e, 0x01, 0xff, 0xc7, 0x00, 0x0f, 0xc0, 0xfc, 0x00, 0x3f, 0xfe, 0x70, 0x3f, 0x03, 0xff, 
	0xc7, 0x00, 0x0f, 0xc0, 0xfe, 0x00, 0x00, 0x0e, 0x70, 0x3f, 0x83, 0xc0, 0x07, 0x00, 0x1f, 0xc0, 
	0xfe, 0x00, 0x3f, 0xfe, 0x70, 0x7b, 0x83, 0xff, 0x87, 0x00, 0x1f, 0xc0, 0xff, 0x00, 0x3f, 0xfe, 
	0x70, 0xf1, 0xc1, 0xff, 0xc7, 0x00, 0x3f, 0xc0, 0xff, 0x00, 0x3f, 0xfe, 0x70, 0xe1, 0xe0, 0xff, 
	0xe7, 0x00, 0x3f, 0xc0, 0xff, 0x80, 0x3f, 0xfe, 0x71, 0xc1, 0xf0, 0xff, 0xe7, 0x00, 0x7f, 0xc0, 
	0xff, 0xc0, 0x3f, 0xfe, 0x73, 0xdf, 0xf1, 0xff, 0xe7, 0x00, 0xff, 0xc0, 0xff, 0xe0, 0x3f, 0xfc, 
	0x73, 0xbf, 0xfb, 0xff, 0xc7, 0x00, 0xff, 0xc0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xc0, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 
	0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 0xff, 0xfc, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0xff, 0xc0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 
	0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0, 
	0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xe0, 
	0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x07, 
	0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 
	0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0
};

void setup() {
  // Inicializa a comunicação serial
  Serial.begin(115200);
  Serial.println("Iniciando sistema...");

  // Inicializa o display e-paper
  display.init(115200);
  display.setRotation(3); // Ajusta a rotação para 90 graus

  // Atualiza o display com a mensagem
  atualizarDisplay();
}

void loop() {
  // O loop está vazio, pois não há necessidade de repetição
}

// Função para atualizar o display e centralizar o texto
void atualizarDisplay() {
  // Limpa a tela e prepara para exibir as informações
  display.setFullWindow();
  display.firstPage();
  do {
    display.fillScreen(GxEPD_WHITE);   // Preenche a tela com branco

    // Define a fonte e a cor preta para o nome do produto
    display.setFont(&FreeMonoBold12pt7b);
    display.setTextColor(GxEPD_BLACK);

    // Centraliza e exibe o texto "ARROZ BIASI T2 5KG"
    centralizarTexto("ARROZ BIASI T2 5KG", 20);  // Exibe o texto na linha Y=20

    // Exibe o preço maior e simula o efeito de negrito desenhando várias vezes
    display.setFont(&FreeMonoBold18pt7b);  // Define uma fonte maior para o preço
    display.setTextColor(GxEPD_RED);  // Define o texto para vermelho
    
    // Simulação de negrito (ajustando a altura para Y=40 a Y=80)
    for (int dx = -1; dx <= 1; dx++) {
      for (int dy = -1; dy <= 1; dy++) {
        display.setCursor(10 + dx, 75 + dy);  // Ajusta o Y para ficar entre 40 e 80
        display.print("R$ 25,39");
      }
    }

    // Exibe o código de barras
    display.setFont();  // Usa a fonte padrão embutida
    display.setTextSize(2);  // Define o tamanho do texto como 2
    display.setCursor(10, 115);  // Posiciona o código de barras
    display.setTextColor(GxEPD_BLACK);
    display.print("78954892541");

    // Exibe o código do produto
    display.setFont();  // Usa a fonte padrão embutida
    display.setTextSize(1);  // Define o tamanho do texto como 1
    display.setCursor(260, 115);  // Posiciona o código do produto
    display.setTextColor(GxEPD_BLACK);
    display.print("53951");

    // Desenha a imagem no display nas coordenadas X=200, Y=40
    display.drawBitmap(200, 40, epd_bitmap_biasi_image, 90, 70, GxEPD_BLACK);  // Desenha a imagem nas coordenadas 200x40
  } while (display.nextPage());  // Atualiza a tela uma única vez com todas as mudanças

  display.hibernate();  // Coloca o display em modo de hibernação após a exibição
}

// Função para centralizar o texto
void centralizarTexto(const char* texto, int posY) {
  // Obter a largura do texto
  int16_t x1, y1;
  uint16_t w, h;
  display.getTextBounds(texto, 0, 0, &x1, &y1, &w, &h);

  // Calcula a posição X centralizada
  int posX = (display.width() - w) / 2;

  // Configura o cursor para a posição centralizada
  display.setCursor(posX, posY);

  // Exibe o texto
  display.print(texto);
}
